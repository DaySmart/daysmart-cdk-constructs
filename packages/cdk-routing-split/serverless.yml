service: cdk-routing-split

plugins:
    - serverless-prune-plugin
    - serverless-plugin-modularize
    - serverless-newrelic-lambda-layers
    - serverless-export-env

package:
    excludeDevDependencies: true
    exclude:
        - '**'
        - '!node_modules/**'
    include:
        - 'dist/**'

provider:
    name: aws
    runtime: nodejs14.x
    lambdaHashingVersion: 20201221
    region: us-east-1
    stage: ${opt:stage, "sandbox"}
    timeout: 120
    memorySize: 192
    apiGateway:
        shouldStartNameWithService: true
    tracing:
        apiGateway: true
    environment:
        DEBUG: ${self:custom.config.DEBUG, false}
        CDK_ROUTING_SPLIT_TABLE: ${self:custom.config.CDK_ROUTING_SPLIT_TABLE}
    iam:
        role:
            statements:
                - Effect: 'Allow'
                  Action:
                      - 'dynamodb:GetItem'
                      - 'dynamodb:PutItem'
                      - 'dynamodb:UpdateItem'
                      - 'dynamodb:Query'
                  Resource:
                      - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.config.CDK_ROUTING_SPLIT_TABLE}'
                      - !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.config.CDK_ROUTING_SPLIT_TABLE}/index/*'

custom:
    name: ${self:service}-${opt:stage, self:provider.stage}
    config:
        API_GATEWAY_SUB_DOMAIN: olbroutingservice
        HOST_DOMAIN: sandbox-saloniris.com
        DOMAIN_CERTIFICATE: d7600eee-753e-449d-8bc9-7251f537fb45
        DEBUG: true
        CDK_ROUTING_SPLIT_TABLE: cdk-routing-split-sandbox
    newRelic:
        accountId: 1464764
        enableExtension: false
        enableIntegrations: false
    output:
        file: ./output-${opt:stage}.json
    prune:
        automatic: true
        number: 3
    modularize:
        glob: 'src/**/serverless.module.yml'

resources:
    Resources:
        dynamoDbTable:
            Type: AWS::DynamoDB::Table
            Properties:
                SSESpecification:
                    SSEEnabled: true
                TableName: ${self:custom.config.CDK_ROUTING_SPLIT_TABLE}
                AttributeDefinitions:
                    - AttributeName: PK
                      AttributeType: S
                KeySchema:
                    - AttributeName: PK
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        domainName:
            Type: 'AWS::ApiGateway::DomainName'
            DependsOn: ApiGatewayRestApi
            Properties:
                DomainName: ${self:custom.config.API_GATEWAY_SUB_DOMAIN}.${self:custom.config.HOST_DOMAIN}
                CertificateArn: !Sub 'arn:${AWS::Partition}:acm:${AWS::Region}:${AWS::AccountId}:certificate/${self:custom.config.DOMAIN_CERTIFICATE}'
        basePathMapping:
            Type: 'AWS::ApiGateway::BasePathMapping'
            DependsOn: domainName
            Properties:
                BasePath: api
                DomainName: ${self:custom.config.API_GATEWAY_SUB_DOMAIN}.${self:custom.config.HOST_DOMAIN}
                RestApiId: { 'Ref': 'ApiGatewayRestApi' }
                Stage: ${opt:stage, self:provider.stage}
