name: CDK Publishing
on:
  push:
    branches:
      - platform-debug-actions
  
jobs:
  get-file-changes-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: 
          node-version: 16
          registry-url: https://registry.npmjs.org/
      - uses: dorny/paths-filter@v2
        id: api-gateway-domain
        with:
          filters: |
            cdk-api-gateway-domain:
              - 'packages/cdk-api-gateway-domain/**'
            cdk-api-gateway-domain-multi-region:
              - 'packages/cdk-api-gateway-domain-multi-region/**'
            cdk-app-bucket:
              - 'packages/cdk-app-bucket/**'
            cdk-app-cloudfront:
              - 'packages/cdk-app-cloudfront/**'
            cdk-base-cf-acm-r53:
              - 'packages/cdk-base-cf-acm-r53/**'
            cdk-certificate:
              - 'packages/cdk-certificate/**'
      # - uses: dorny/paths-filter@v2
      #   id: api-gateway-domain-multi-region
      #   with:
      #     filters: |
      #       cdk-api-gateway-domain-multi-region:
      #         - 'packages/cdk-api-gateway-domain-multi-region/**'
      # - uses: dorny/paths-filter@v2
      #   id: app-bucket
      #   with:
      #     filters: |
      #       cdk-app-bucket:
      #         - 'packages/cdk-app-bucket/**'
      # - uses: dorny/paths-filter@v2
      #   id: app-cloudfront
      #   with:
      #     filters: |
      #       cdk-app-cloudfront:
      #         - 'packages/cdk-app-cloudfront/**'
      # - uses: dorny/paths-filter@v2
      #   id: base-cf-acm-r53
      #   with:
      #     filters: |
      #       cdk-base-cf-acm-r53:
      #         - 'packages/cdk-base-cf-acm-r53/**'
      # - uses: dorny/paths-filter@v2
      #   id: certificate
      #   with:
      #     filters: |
      #       cdk-certificate:
      #         - 'packages/cdk-certificate/**'
      # # - uses: dorny/paths-filter@v2
      # #   id: cloudfront-behavior
      # #   with:
      # #     filters: |
      # #       cdk-cloudfront-behavior:
      # #         - 'packages/cdk-cloudfront-behavior/**'
      # - uses: dorny/paths-filter@v2
      #   id: cloudfront-cache-policy
      #   with:
      #     filters: |
      #       cdk-cloudfront-cache-policy:
      #         - 'packages/cdk-cloudfront-cache-policy/**'
      # - uses: dorny/paths-filter@v2
      #   id: cloudfront-origin-request-policy
      #   with:
      #     filters: |
      #       cdk-cloudfront-origin-request-policy:
      #         - 'packages/cdk-cloudfront-origin-request-policy/**'
      # - uses: dorny/paths-filter@v2
      #   id: dynamodbtable
      #   with:
      #     filters: |
      #       cdk-dynamodbtable:
      #         - 'packages/cdk-dynamodbtable/**'
      # - uses: dorny/paths-filter@v2
      #   id: ecs-alb
      #   with:
      #     filters: |
      #       cdk-ecs-alb:
      #         - 'packages/cdk-ecs-alb/**'
      # - uses: dorny/paths-filter@v2
      #   id: ecs-codedeploy-resources
      #   with:
      #     filters: |
      #       cdk-ecs-codedeploy-resources:
      #         - 'packages/cdk-ecs-codedeploy-resources/**'
      # - uses: dorny/paths-filter@v2
      #   id: ecs-nlb
      #   with:
      #     filters: |
      #       cdk-ecs-nlb:
      #         - 'packages/cdk-ecs-nlb/**'
      # - uses: dorny/paths-filter@v2
      #   id: ecs-task-definition
      #   with:
      #     filters: |
      #       cdk-ecs-task-definition:
      #         - 'packages/cdk-ecs-task-definition/**'
      # - uses: dorny/paths-filter@v2
      #   id: environment-resources
      #   with:
      #     filters: |
      #       cdk-environment-resources:
      #         - 'packages/cdk-environment-resources/**'
      # - uses: dorny/paths-filter@v2
      #   id: files-bucket
      #   with:
      #     filters: |
      #       cdk-files-bucket:
      #         - 'packages/cdk-files-bucket/**'
      # - uses: dorny/paths-filter@v2
      #   id: multi-account-dns
      #   with:
      #     filters: |
      #       cdk-multi-account-dns:
      #         - 'packages/cdk-multi-account-dns/**'
      # - uses: dorny/paths-filter@v2
      #   id: pipeline
      #   with:
      #     filters: |
      #       cdk-pipeline:
      #         - 'packages/cdk-pipeline/**'
      # - uses: dorny/paths-filter@v2
      #   id: route53-record
      #   with:
      #     filters: |
      #       cdk-route53-record:
      #         - 'packages/cdk-route53-record/**'
      # - uses: dorny/paths-filter@v2
      #   id: s3-deployment
      #   with:
      #     filters: |
      #       cdk-s3-deployment:
      #         - 'packages/cdk-s3-deployment/**'
      # - uses: dorny/paths-filter@v2
      #   id: s3-redirect
      #   with:
      #     filters: |
      #       cdk-s3-redirect:
      #         - 'packages/cdk-s3-redirect/**'
      # - uses: dorny/paths-filter@v2
      #   id: shared-services-resources
      #   with:
      #     filters: |
      #       cdk-shared-services-resources:
      #         - 'packages/cdk-shared-services-resources/**'
      # - uses: dorny/paths-filter@v2
      #   id: sns-topic
      #   with:
      #     filters: |
      #       cdk-sns-topic:
      #         - 'packages/cdk-sns-topic/**'
      # - uses: dorny/paths-filter@v2
      #   id: static-website
      #   with:
      #     filters: |
      #       cdk-static-website:
      #         - 'packages/cdk-static-website/**'



  
      - if: steps.cdk-api-gateway-domain.outputs.cdk-api-gateway-domain == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test
          npm publish 
        working-directory: packages/cdk-api-gateway-domain
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-api-gateway-domain-multi-region.outputs.cdk-api-gateway-domain-multi-region == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test 
          npm publish 
        working-directory: packages/cdk-api-gateway-domain-multi-region
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-app-bucket.outputs.cdk-app-bucket == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test 
          npm publish 
        working-directory: packages/cdk-app-bucket
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-app-cloudfront.outputs.cdk-app-cloudfront == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test
          npm publish 
        working-directory: packages/cdk-app-cloudfront
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-base-cf-acm-r53.outputs.cdk-base-cf-acm-r53 == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test   
          npm publish 
        working-directory: packages/cdk-base-cf-acm-r53
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-certificate.outputs.cdk-certificate == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test          
          npm publish 
        working-directory: packages/cdk-certificate
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # - if: steps.cdk-cloudfront-behavior.outputs.cdk-cloudfront-behavior == 'true'
      #   run: | 
      #     npm install
      #     npm run build
      #     npm run lint
      #     npm run test           
      #     npm publish 
      #   working-directory: packages/cdk-cloudfront-behavior
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-cloudfront-cache-policy.outputs.cdk-cloudfront-cache-policy == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test           
          npm publish 
        working-directory: packages/cdk-cloudfront-cache-policy
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-cloudfront-origin-request-policy.outputs.cdk-cloudfront-origin-request-policy == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test           
          npm publish 
        working-directory: packages/cdk-cloudfront-origin-request-policy
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-dynamodbtable.outputs.cdk-dynamodbtable == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test 
          npm publish 
        working-directory: packages/cdk-dynamodbtable
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-ecs-alb.outputs.cdk-ecs-alb == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test           
          npm publish 
        working-directory: packages/cdk-ecs-alb
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-ecs-codedeploy-resources.outputs.cdk-ecs-codedeploy-resources == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test         
          npm publish 
        working-directory: packages/cdk-ecs-codedeploy-resources
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-ecs-nlb.outputs.cdk-ecs-nlb == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test           
          npm publish 
        working-directory: packages/cdk-ecs-nlb
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-ecs-task-definition.outputs.cdk-ecs-task-definition == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test           
          npm publish 
        working-directory: packages/cdk-ecs-task-definition
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-environment-resources.outputs.cdk-environment-resources == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test           
          npm publish 
        working-directory: packages/cdk-environment-resources
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-files-bucket.outputs.cdk-files-bucket == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test           
          npm publish 
        working-directory: packages/cdk-files-bucket
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-multi-account-dns.outputs.cdk-multi-account-dns == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test           
          npm publish 
        working-directory: packages/cdk-multi-account-dns
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-pipeline.outputs.cdk-pipeline == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test           
          npm publish 
        working-directory: packages/cdk-pipelin
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-route53-record.outputs.cdk-route53-record == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test           
          npm publish 
        working-directory: packages/cdk-route53-record
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-s3-deployment.outputs.cdk-s3-deployment == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test           
          npm publish 
        working-directory: packages/cdk-s3-deployment
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-s3-redirect.outputs.cdk-s3-redirect == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test           
          npm publish 
        working-directory: packages/cdk-s3-redirect
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-shared-services-resources.outputs.cdk-shared-services-resources == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test          
          npm publish 
        working-directory: packages/cdk-shared-services-resources
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - if: steps.cdk-sns-topic.outputs.cdk-sns-topic == 'true'
        run: | 
          npm install
          npm run build
          npm run lint
          npm run test          
          npm publish 
        working-directory: packages/cdk-sns-topic
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # - if: steps.cdk-static-website.outputs.cdk-static-website == 'true'
      #   run: | 
      #     npm install
      #     npm run build
      #     npm run lint
      #     npm run test          
      #     npm publish 
      #   working-directory: packages/cdk-static-website
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  
  # Slack-on-failure:
  #   if: always()
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Send slack message
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_CHANNEL: platform-alerts
  #         SLACK_COLOR: ${{ job.status }}
  #         SLACK_MESSAGE: 'Workflow was, ${{ job.status }}' 
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
